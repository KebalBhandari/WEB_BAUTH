@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/assets/css/trainmodel.css" rel="stylesheet" />
<div class="content-page">
    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box">
                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item"><a href="/Dashboard">Dashboard</a></li>
                                <li class="breadcrumb-item active">Test Model</li>
                            </ol>
                        </div>
                        <h4 class="page-title">Behavioral Authentication Demo</h4>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="d-grid">
                                        <div id="testSection">
                                            <p>[ <span id="taskInstruction">Please click on the dots that appear and type the following text:</span> ] </p>
                                            <div class="progress">
                                                <div id="taskProgressBar" class="progress-bar progress-bar-striped" role="progressbar"
                                                     style="width: 0%;">
                                                    0%
                                                </div>
                                            </div>
                                            <div id="dotArea" class="instructions">
                                                Click on the dots as they appear.
                                                <div id="dotCount" class="dot-count">Dots Clicked: 0/5</div>
                                            </div>
                                            <div id="shapeArea" class="instructions" style="display: none;">
                                                <p id="shapeQuestion" class="mb-2"></p>
                                                <div id="shapesContainer"></div>
                                                <div id="shapeCount" class="dot-count">Shapes Selected: 0/5</div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="inputText" class="form-label">Your Input:</label><blockquote class="blockquote">
                                                    <p id="promptText" class="prompt-text"></p>
                                                </blockquote>
                                                <textarea class="form-control" id="inputText" rows="3" placeholder="Type here..."></textarea>
                                            </div>
                                            <button class="btn btn-primary btn-animated" id="nextAttempt">Submit and Test</button>
                                        </div>

                                        <div id="resultSection" class="mt-5" style="display: none;">
                                            <p class="result">Matching Percentage: <span id="matchingPercent">100</span>%</p>
                                            <button class="btn btn-secondary" id="tryAgain">Try Again</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
        $(document).ready(function() {
        // Sentences ranging from easy to hard
        const sentences = [
            "The quick brown fox jumps over the lazy dog.",
            "Pack my box with five dozen liquor jugs.",
            "How razorback-jumping frogs can level six piqued gymnasts!",
            "Sympathizing would fix Quaker objectives.",
            "Crazy Frederick bought many very exquisite opal jewels.",
            "Jaded zombies acted quaintly but kept driving their oxen forward.",
            "Amazingly few discotheques provide jukeboxes.",
            "Grumpy wizards make toxic brew for the evil queen and jack.",
            "The five boxing wizards jump quickly.",
            "Big Fuji waves pitch enzymed kex liquor jugs.",
            "Lazy dogs often sleep in the sunniest spot in the yard.",
            "Twelve jovial men quickly pick five ripe mangoes.",
            "Bright yellow flowers bloom during springtime.",
            "Jack quietly observed the mesmerizing sunset from the hilltop.",
            "Few daring explorers venture into the uncharted forest.",
            "Ducks gracefully glide across the shimmering pond.",
            "A brisk wind swept across the barren desert landscape.",
            "Seven curious cats climbed up the ancient oak tree.",
            "Heavy clouds gathered ominously over the distant mountains.",
            "Gleaming stars twinkled brightly in the midnight sky.",
            "Smart students solve tricky problems with logical thinking.",
            "Vast green fields stretch endlessly beyond the horizon.",
            "Colorful birds sing melodious tunes at dawn.",
            "Ten swift deer raced across the open meadow.",
            "Ancient ruins reveal secrets of a forgotten civilization.",
            "The bustling market overflowed with vibrant goods and lively chatter.",
            "Early morning hikers reached the summit before sunrise.",
            "Crystal-clear water cascades down the rocky cliff.",
            "Golden sands glisten under the warm tropical sun.",
            "Mysterious shadows danced along the cobblestone streets.",
            "Adventurous kids built an elaborate treehouse in the backyard.",
            "The chef skillfully prepared a delicious five-course meal.",
            "A sudden thunderstorm caught everyone by surprise.",
            "Enthusiastic fans cheered loudly for their favorite team.",
            "Lush gardens display a dazzling array of exotic flowers.",
            "Careful planning ensures a smooth and successful event.",
            "Fierce winds howled through the narrow mountain pass.",
            "The library offers a quiet haven for avid readers.",
            "Tall skyscrapers define the city’s iconic skyline.",
            "Playful dolphins leaped gracefully out of the water.",
            "Whimsical paintings adorn the walls of the cozy cafe.",
            "The scent of fresh bread wafted through the bustling bakery.",
            "Bright lanterns illuminated the festive village square.",
            "Determined athletes train tirelessly for the upcoming marathon.",
            "Fluffy snowflakes gently blanketed the sleepy town.",
            "Inventive scientists work on groundbreaking new technologies.",
            "The majestic eagle soared high above the rugged cliffs.",
            "Serene lakes reflect the beauty of the surrounding forest.",
            "Friendly neighbors gathered for an evening barbecue.",
            "The musician played a haunting melody on the grand piano."
        ];

        const totalDots = 5;
        const totalAttempts = 1;
        const DOT_SIZE = 30;
        const EDGE_BUFFER = 20;

        let currentAttempt = 1;
        let backspaceTimings = [];
        let timings = [];
        let keyHoldTimes = [];
        let dotTimings = [];
        let dotMouseMovements = [];
        let promptTexts = [];
        let userInputs = [];
        let lastKeyTime = null;

        function initializeTest() {
            // Reset all tracking arrays
            timings = [];
            keyHoldTimes = [];
            backspaceTimings = [];
            dotTimings = [];
            dotMouseMovements = [];
            userInputs = [];
            promptTexts = [];
            lastKeyTime = null;
            currentAttempt = 1;

            // UI Reset
            $('#inputText').val('').prop('disabled', false);
            $('#matchingPercent').text('0');
            $('#dotArea').empty().append('<div id="dotCount" class="dot-count">Dots Clicked: 0/5</div>');
            $('#dotArea').show();
            $('#nextAttempt').removeClass('btn-animated');
            $('#currentAttempt').text(currentAttempt);
            $('#taskInstruction').text('Please click on the dots that appear and type the following text:');
            updateProgressBar(0);

            // Initialize prompts
            promptTexts = Array.from({ length: totalAttempts }, () =>
                sentences[Math.floor(Math.random() * sentences.length)]
            );
            $('#promptText').text(promptTexts[0]);

            $('#testSection').show();
            $('#resultSection').hide();
            startDotSequence();
        }

        function updateProgressBar(percentage) {
            const rounded = Math.floor(percentage);
            $('#taskProgressBar').css('width', rounded + '%').text(rounded + '%');
        }

        function startDotSequence() {
            const area = document.getElementById('dotArea');
            const areaRect = area.getBoundingClientRect();
            const timingsArray = [];
            const mouseMovements = [];
            let dotCount = 0;
            let lastMove = 0;

            // Event handlers
            function handleClick(e) {
                const dot = e.target.closest('.dot');
                if (!dot) return;

                const clickTime = performance.now();
                const appearTime = parseFloat(dot.dataset.appearTime);
                timingsArray.push(clickTime - appearTime);

                dot.remove();
                dotCount++;
                $('#dotCount').text(`Dots Clicked: ${dotCount}/${totalDots}`);
                updateProgressBar((dotCount / totalDots) * 100);

                if (dotCount < totalDots) {
                    createDot();
                } else {
                    cleanup();
                }
            }

            function handleMove(e) {
                const now = performance.now();
                if (now - lastMove < 33) return; // ~30fps throttling

                lastMove = now;
                mouseMovements.push({
                    time: now,
                    x: e.clientX - areaRect.left,
                    y: e.clientY - areaRect.top
                });
            }

            function calculatePosition() {
                const maxX = area.clientWidth - DOT_SIZE - EDGE_BUFFER * 2;
                const maxY = area.clientHeight - DOT_SIZE - EDGE_BUFFER * 2;
                return {
                    x: EDGE_BUFFER + Math.random() * maxX,
                    y: EDGE_BUFFER + Math.random() * maxY
                };
            }

            function createDot() {
                const dot = document.createElement('div');
                dot.className = 'dot';
                const pos = calculatePosition();

                Object.assign(dot.style, {
                    left: `${pos.x}px`,
                    top: `${pos.y}px`,
                    width: `${DOT_SIZE}px`,
                    height: `${DOT_SIZE}px`
                });

                dot.dataset.appearTime = performance.now();
                area.appendChild(dot);
            }

            function cleanup() {
                area.removeEventListener('click', handleClick);
                area.removeEventListener('mousemove', handleMove);
                dotMouseMovements[currentAttempt - 1] = mouseMovements;
                dotTimings[currentAttempt - 1] = timingsArray;
            }

            // Initialize
            area.addEventListener('click', handleClick);
            area.addEventListener('mousemove', handleMove);
            createDot();
        }

        // Input handling
        $('#inputText').on('keydown', function(event) {
            const currentTime = Date.now();

            // Backspace tracking
            if (event.key === 'Backspace') {
                (backspaceTimings[currentAttempt - 1] ??= []).push({
                    time: currentTime,
                    action: 'pressed'
                });
            }

            // Key interval tracking
            if (lastKeyTime !== null) {
                (timings[currentAttempt - 1] ??= []).push(currentTime - lastKeyTime);
            }
            lastKeyTime = currentTime;

            // Key hold tracking
            (keyHoldTimes[currentAttempt - 1] ??= []).push({
                keydownTime: currentTime,
                keyupTime: null,
                duration: null
            });
        });

        $('#inputText').on('keyup', function(event) {
            const currentTime = Date.now();

            // Backspace release tracking
            if (event.key === 'Backspace') {
                (backspaceTimings[currentAttempt - 1] ??= []).push({
                    time: currentTime,
                    action: 'released'
                });
            }

            // Update key hold duration
            const keyData = keyHoldTimes[currentAttempt - 1];
            for (let i = keyData.length - 1; i >= 0; i--) {
                if (!keyData[i].keyupTime) {
                    keyData[i].keyupTime = currentTime;
                    keyData[i].duration = currentTime - keyData[i].keydownTime;
                    break;
                }
            }
        });

        // Security measures
        $('#inputText').on('copy paste cut contextmenu', function(e) {
            e.preventDefault();
            if (e.type !== 'contextmenu') {
                alert('Copying and pasting are disabled. Please type manually.');
            }
        });

        // Submission handler
        $('#nextAttempt').click(async function() {
            const userInput = $('#inputText').val().trim();
            const $btn = $(this);

            // Validation checks
            if (!userInput) return alert('Please type the text before proceeding.');
            if (userInput !== promptTexts[currentAttempt - 1].trim())
                return alert('Input does not match the prompt text.');
            if ((dotTimings[currentAttempt - 1]?.length ?? 0) < totalDots)
                return alert(`Click all ${totalDots} dots before proceeding.`);

            // Prepare for submission
            userInputs.push(userInput);
            $btn.addClass('btn-animated');
            $('#testSection').hide();
            $('#inputText').prop('disabled', true);

            try {
                await saveDataToServer();
            } catch (error) {
                console.error('Submission error:', error);
                AlertTost("error", "Submission failed. Please try again.");
            }
        });

        async function saveDataToServer() {
            const dataToSend = {
                timings: sanitizeArray(timings),
                keyHoldTimes: sanitizeArray(keyHoldTimes),
                backspaceTimings: sanitizeArray(backspaceTimings),
                dotTimings: sanitizeArray(dotTimings),
                dotMouseMovements: sanitizeArray(dotMouseMovements),
                userInputs: userInputs.filter(Boolean)
            };

            try {
                const response = await AjaxCall("/TrainModel/PredictData", dataToSend);
                const result = JSON.parse(response);

                if (result.status === "SUCCESS") {
                    $('#matchingPercent').text((result.confidence * 100).toFixed(2));
                    $('#resultSection').show();

                    AlertTost(
                        result.isAnomaly ? "warning" : "success",
                        result.isAnomaly
                            ? "Anomaly detected! Verify user."
                            : "Behavior matches expected pattern."
                    );
                } else {
                    throw new Error(result.message || "Prediction failed");
                }
            } catch (e) {
                console.error("Server error:", e);
                AlertTost("error", e.message || "Request failed");
            }
        }

        function sanitizeArray(data) {
            return (Array.isArray(data) ? data : [])
                .filter(entry => Array.isArray(entry) ? entry.length > 0 : !!entry);
        }

        // Reset functionality
        $('#tryAgain').click(initializeTest);
        initializeTest();
    });

</script>